https://postimg.cc/S25H0c4C

Explanation of Infrastructure:
1. Server 1 (Web Server: Nginx): The web server component (Nginx) remains the same as in the previous infrastructure design. It handles incoming HTTP requests, serves static files, and passes dynamic requests to the application servers.
2. Server 2 (Application Server): Server 2 is an application server responsible for executing the application codebase, handling dynamic content generation, and communicating with the database. It works in conjunction with the web server to process and respond to user requests.
3. Server 3 (Additional Application Server): The addition of a third server enhances the infrastructure's redundancy and scalability. With multiple application servers, the workload can be distributed, allowing for better performance, increased capacity, and fault tolerance. Server 3 performs the same role as Server 2, executing the application codebase and handling requests.
4. Load Balancer (HAProxy): The load balancer, in this case, HAProxy, is introduced to distribute incoming requests across multiple application servers. It uses a distribution algorithm (e.g., round-robin, least connections) to allocate the requests among the available servers. This helps achieve better resource utilization, load distribution, and improved responsiveness.
5. Application Files (Codebase): The application files represent the codebase of the web application, including scripts, templates, and resources required for dynamic content generation. They are deployed on both Server 2 and Server 3 to ensure redundancy and enable load balancing.
6. Database (MySQL): The database component (MySQL) remains the same as in the previous infrastructure. It stores and manages the website's data. Both application servers communicate with the database to retrieve or store information.

specifics of the Infrastructure:
• Load Balancer Distribution Algorithm: The HAProxy load balancer can be configured with various distribution algorithms such as round-robin, least connections, or source IP hashing. The chosen algorithm determines how the load balancer distributes incoming requests among the available application servers. For example, with round-robin, each server receives requests in a sequential order.
• Active-Active or Active-Passive Setup: The load balancer setup in this infrastructure is an Active-Passive configuration. In an Active-Passive setup, one server (Active) actively handles incoming requests while the other server (Passive) remains on standby. The Passive server becomes active only when the Active server fails or experiences issues. This setup provides redundancy and failover capability but may underutilize resources during normal operations.
• Primary-Replica (Master-Slave) Database Cluster: In a Primary-Replica database cluster, the Primary node handles both read and write operations, while the Replica node(s) replicate data from the Primary node and handle read-only queries. The Primary node acts as the authoritative source for data modifications, ensuring data consistency. Replication allows for data redundancy, backup, and improved read scalability.
• Difference between Primary and Replica Nodes: The Primary node in the database cluster is responsible for handling write operations, data modifications, and maintaining data consistency. It is the node that all application servers communicate with when making changes to the database. Replica nodes, on the other hand, replicate data from the Primary node and handle read-only queries. They serve as backups and can take over as the Primary
